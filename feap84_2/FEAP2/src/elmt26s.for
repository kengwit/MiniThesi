      SUBROUTINE ELMT26(D,UL,XL,IX,TL,S,P,h1,h2,h3,NDF,NDM,NST,ISW)
C
C.... PLANE/AXISYMMETRIC LINEAR ELEMENT ROUTINE
C....    MATERIAL 1 = ELASTIC
C....    MATERIAL 2 = LINEAR VISCOELASTIC
C....    MATERIAL 3 = VISCOELASTIC WITH DAMAGE
C....    MATERIAL 4 = VISCO-PLASTIC
C....    MATERIAL 5 = ELASTO-PLASTIC WITH HARDENING (PLANE STRAIN)
C....    MATERIAL 6 = DRUCKER/PRAGER ELASTO-PLASTIC/NON-ASSOCIATIVE
C.... VERSION 5/23/84
C
      USE bdata
      USE cdata
      USE eldata
      USE hdata
      USE tdata
      USE iofile
      USE strnam

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL FLG
      CHARACTER*5 AMAT,STEEL,USER
      COMMON /ELM26/ TRDE,G(2,4),IBBAR
!$OMP THREADPRIVATE (/ELM26/)       
      DIMENSION D(*),UL(NDF,*),XL(NDM,*),IX(*),TL(*),S(NST,*),P(*)
     1         ,SHP(3,9),SG(9),TG(9),WG(9),di(10)
      DIMENSION EP(4),DE(4),AA(4,4),SIGV(7),BBAR(4,2,4),BBD(4,2)
      dimension h1(*),h2(*),h3(*)
      SAVE /ELM26/
      DATA STEEL/'STEEL'/,USER/'USERS'/
C.... GO TO CORRECT ARRAY PROCESSOR
      GO TO(1,2,3,4,5,3,2,4), ISW
C.... INPUT MATERIAL PROPERTIES
1     call dinput(di,1)
      imat = di(1)  
      call dinput(di,10)
      amat = 'users'
      itype = di(1)        ! 0 = plane strain , 1 = axisym.
      II    = di(2)        ! 0 = bbar,  1 = b 
      d(8)  = di(3)        ! rho
      d(1)  = di(4)        ! K
      d(2)  = di(5)        ! G   
      d(3)  = di(6)
      d(4)  = di(7)
       
140   GO TO (11,12,13,11,11,11,11,11), IMAT
  11  IF(AMAT.NE.STEEL) GO TO 111
      D(1) = 2.5D+07
      D(2) = 3.0D+07/2.6
      D(3) = 30000.
      D(4) = 40000.
      D(5) = 1.5
      D(6) = 0.
      D(7) = 0.5
      D(8) = 7.25D-04
      D(9) = 50.D0
 111  CONTINUE
      IF(IMAT.EQ.5.AND.D(9).EQ.0.D0) D(9) = 50.D0
      IF(IMAT.LT.5.OR.IMAT.EQ.6)D(4)=D(3)*DSQRT(2.D0/3.D0)
      IF(IMAT.EQ.4) GO TO 14
  12  CONTINUE
  13  CONTINUE
      GO TO 115
14    IF(D(5).EQ.0.0D0) D(5) = .001
      IF(D(6).EQ.0.0D0) D(6) = 2.
115   D(13) = 0.0
      IF(ITYPE.NE.0) D(13) = 1.0
      D(14) = IMAT
      IF (II.NE.0) II = 1
      D(15) = II
      nh1  = 40
      IF(IMAT.EQ.1) WRITE(iow,2003) (D(I),I=1,4)
      IF(IMAT.EQ.2) WRITE(iow,2000) (D(I),I=1,4)
      IF(IMAT.EQ.3) WRITE(iow,2004) (D(I),I=1,6)
      IF(IMAT.EQ.4) WRITE(iow,2005) (D(I),I=1,6)
      IF(IMAT.EQ.5) WRITE(iow,2006) (D(I),I=1,7),D(9)
      IF(IMAT.EQ.6) WRITE(iow,2007) (D(I),I=1,5)

      WRITE(iow,2008) D(8),ITYPE,II
c.... description of stresses  
      strsus( 1) =  '  Stress  S_xx '
      strsus( 2) =  '  Stress  S_xy '
      strsus( 3) =  '  Stress  S_yy '
      strsus( 4) =  '  Stress  S_zz '
      do is =5,25
        strsus(is) = '               '
      end do
   2  RETURN
C
C.... COMPUTE TANGENT STIFFNESS AND RESIDUAL FORCE VECTOR
   3  L    = 2
      TYPE = D(13)
      IMAT = D(14)
      IBBAR= D(15)
      FLG = ISW .EQ. 6
      ISYM = 0
      IF(IMAT.EQ.6) ISYM = 1
      CALL PGAUSS(L,LINT,SG,TG,WG)
      NN   = 0
C
      CALL GVEC26(XL,UL(1,NEN+1),TYPE,NDM,NDF)
      DO 400 L = 1,LINT
      CALL SHAPEF26(SG(L),TG(L),XL,SHP,XSJ,NDM)
C.... COMPUTE DISPLACEMENT GRADIENT AND INCR. DISPL. GRADIENT
      CALL STRN26(XR1,SHP,XL,UL(1,1+NEN),TYPE,XR0,XZ0,NDM,NDF,NEL,DE)
      CALL STRN26(XR1,SHP,XL,UL(1,    1),TYPE,XR0,XZ0,NDM,NDF,NEL,EP)
C.... COMPUTE CAUCHY STRESSES AND SPATIAL TANGENT TENSOR AT T-N+1
      CALL MODEL26(D,EP(1),DE(1),H1(1+NN),H2(1+NN),AA,IMAT)
C.... MULTIPLY TANGENT MODULI AND STRESS BY VOLUME ELEMENT
      XSJ = XSJ*WG(L)*XR1
      NN2 = NN + 5
      DO 350 I = 1,4
      SIGV(I) = H2(NN2+I)*XSJ
      DO 350 J = 1,4
350   AA(I,J) = AA(I,J)*XSJ
C.... COMPUTE B-BAR MATRIX
      DO 355 I = 1,NEL
      CALL BMAT26(TYPE,XR0,SHP(1,I),G(1,I),BBAR(1,1,I),IBBAR)
355   CONTINUE
C.... COMPUTE THE TANGENT STIFFNESS MATRIX
      I1 = 0
      DO 395 I = 1,NEL
      DO 375 II = 1,2
C.... COMPUTE THE INTERNAL STRESS DIVERGENCE TERM
375   P(I1+II) = P(I1+II) - DOT(BBAR(1,II,I),SIGV(1),4)
C.... COMPUTE BBAR-T * AA * DVOL
      IF(FLG) GO TO 395
      DO 380 II = 1,2
      DO 380 JJ = 1,4
380   BBD(JJ,II) = DOT(BBAR(1,II,I),AA(1,JJ),4)
C.... COMPUTE TANGENT STIFFNESS
      J1 = I1 - ISYM*I1
      IL = I  + ISYM*(1 - I)
      DO 390 J = IL,NEL
      DO 385 II = 1,2
      DO 385 JJ = 1,2
385   S(I1+II,J1+JJ) = S(I1+II,J1+JJ) + DOT(BBD(1,II),BBAR(1,JJ,J),4)
390   J1 = J1 + NDF
395   I1 = I1 + NDF
400   NN = NN + 10
C.... FORM LOWER PART BY SYMMETRY
      IF(ISYM.EQ.0) THEN
         DO 405 I = 1,NST
         DO 405 J = I,NST
405      S(J,I) = S(I,J)
      ENDIF
      RETURN
C
C.... OUTPUT STRESSES
    4 L = 2
      TYPE = D(13)
      IMAT = D(14)
      CALL PGAUSS(L,LINT,SG,TG,WG)
      NN   =  0
C.... COMPUTE ELEMENT STRESSES
      CALL GVEC26(XL,UL(1,NEN+1),TYPE,NDM,NDF)
      DDM = 0.0
      RR = 0.0
      ZZ = 0.0
      DO 425 I = 1,4
 425  SIGV(I) = 0.0
      DO 430 L = 1,LINT
       CALL SHAPEF26(SG(L),TG(L),XL,SHP,XSJ,NDM)
C....  COMPUTE DISPLACEMENT GRADIENT AND INCR. DISPL. GRADIENT
       CALL STRN26(XR1,SHP,XL,UL(1,1+NEN),TYPE,XR0,XZ0,NDM,NDF,NEL,DE)
       CALL STRN26(XR1,SHP,XL,UL(1,    1),TYPE,XR0,XZ0,NDM,NDF,NEL,EP)
C....  COMPUTE CAUCHY STRESSES AND SPATIAL TANGENT TENSOR AT T-N+1
       CALL MODEL26(D,EP(1),DE(1),H1(1+NN),H2(1+NN),AA,IMAT)
       DDM = DDM + DM
       RR = RR + XR0*0.25
       ZZ = ZZ + XZ0*0.25
C....  MOVE STRESSES FOR PRINTING
       NN2 = NN + 1
       SIGV(1) = SIGV(1) + 0.25*H2(NN2+5)
       SIGV(2) = SIGV(2) + 0.25*H2(NN2+8)
       SIGV(3) = SIGV(3) + 0.25*H2(NN2+6)
       SIGV(4) = SIGV(4) + 0.25*H2(NN2+7)
 430   NN = NN + 10
      IF(ISW.EQ.8) GO TO 8
      CALL PSTRES(SIGV,SIGV(5),SIGV(6),SIGV(7))
C.... OUTPUT STRESSES
      MCT = MCT - 2
      IF(MCT.GT.0) GO TO 440
                   WRITE(iow,2001) O,HEAD
      if(ior.lt.0) WRITE(  *,2001) O,HEAD
      MCT = 50
 440            WRITE(iow,2002)N,MA,(SIGV(II),II=1,6),RR,ZZ,DDM,SIGV(7)
      if(ior.lt.0)WRITE(*,2002)N,MA,(SIGV(II),II=1,6),RR,ZZ,DDM,SIGV(7)
      RETURN
C
C.... COMPUTE CONSISTENT MASS MATRIX
5     L = 2
      CALL PGAUSS(L,LINT,SG,TG,WG)
      DO 520 L = 1,LINT
C.... COMPUTE SHAPE FUNCTIONS
      CALL SHAPEF26(SG(L),TG(L),XL,SHP,XSJ,NDM)
C.... COMPUTE RADIUS AND MULTIPLY INTO JACOBIAN FOR AXISYMMETRY
      IF(D(13).NE.0.0D0) THEN
       XX = 0.0
       DO 500 J = 1,NEL
500      XX = XX + SHP(3,J)*XL(1,J)
       XSJ = XSJ*XX
      ENDIF
      XSJ = WG(L)*XSJ*D(8)
C.... FOR EACH NODE J COMPUTE DB = RHO*SHAPE*DV
      J1 = 1
      DO 520 J = 1,NEL
      W11 = SHP(3,J)*XSJ
C.... COMPUTE A LUMPED MASS
      P(J1) = P(J1) + W11
C.... FOR EACH NODE K COMPUTE MASS MATRIX (UPPER TRIANGULAR PART)
      K1 = J1
      DO 510 K = J,NEL
      S(J1,K1) = S(J1,K1) + SHP(3,K)*W11
510   K1 = K1 + NDF
520   J1 = J1 + NDF
C.... COMPUTE MISSING PARTS AND LOWER PART BY SYMMETRIES
      NSL = NEL*NDF
      DO 530 J = 1,NSL,NDF
      P(J+1) = P(J)
      DO 530 K = J,NSL,NDF
      S(J+1,K+1) = S(J,K)
      S(K,J) = S(J,K)
530   S(K+1,J+1) = S(J,K)
      RETURN
C
C.... STRESS COMPUTATIONS FOR NODES
8     NP1 = NP +  NUMNP 
      istv = -5
      CALL STCN26(IX,XL,H2(6),Strea,strea(NP1),NDM,NEL,NUMNP)
      RETURN
C
C.... FORMATS FOR INPUT-OUTPUT
c1000  FORMAT(2I5)
c1001  FORMAT(A5,1X,2I10,F10.0/9F10.0)
2000  FORMAT(/5X,
     1'PLANE STRAIN-AXISYMMETRIC LINEAR VISCO-ELASTIC ELEMENT'//10X
     2,'BULK MODULUS',E25.5/10X,'SHORT TERM SHEAR MODULUS',E13.5/10X
     3,'LONG TERM SHEAR MODULUS',E14.5/10X,'TIME CONSTANT, BETA',E18.5)
2001  FORMAT(A1,20A4//'  ELEMENT STRESSES'//'  ELMT  MATL  11-STRESS'
     1,'  12-STRESS  22-STRESS  33-STRESS   1-STRESS   2-STRESS'/
     2 '  1-COORD  2-COORD  YIELD ? ',34X,'ANGLE')
2002  FORMAT(2I6,6E11.3/2F9.3,F10.4,31X,F8.2/1X)
2003  FORMAT(/5X,
     1'PLANE STRAIN-AXISYMMETRIC ELASTIC ELEMENT'//10X
     2,'BULK MODULUS',E25.5/10X,'SHEAR MODULUS',E24.5/10X
     3,'YIELD STRESS',E25.5/10X,'YIELD CIRCLE RADIUS',E18.5)
2004  FORMAT(/5X,
     1'PLANE STRAIN-AXISYMMETRIC VISCO-ELASTIC DAMAGE ELEMENT'//10X
     2,'BULK MODULUS',E25.5/10X,'SHORT TERM SHEAR MODULUS',E13.5/10X
     3,'LONG TERM SHEAR MODULUS',E14.5/10X,'TIME CONSTANT, BETA',E18.5/
     4 10X,'DAMAGE LIMIT',E25.5/10X,'DAMAGE EXPONENT',E22.5)
2005  FORMAT(/5X,
     1'PLANE STRAIN-AXISYMMETRIC LINEAR VISCO-PLASTIC ELEMENT'//10X
     2,'BULK MODULUS',E25.5/10X,'SHEAR MODULUS',E24.5/10X
     3,'YIELD STRESS',E25.5/10X,'YIELD CIRCLE RADIUS',E18.5/
     4 10X,'GAMMA-TIME CONSTANT',E18.5/10X,'NNN-EXPONENT',E25.5)
2006  FORMAT(/5X,
     1'PLANE STRAIN-AXISYMMETRIC ELASTO-PLASTIC HARDENING ELEMENT'//
     210X,'BULK MODULUS',E25.5/10X,'SHEAR MODULUS',E24.5/
     310X,'YIELD STRESS-0',E23.5/10X,'YIELD STRESS-INFINITY',E16.5/
     410X,'EXPONENTIAL COEFF.',E19.5/10X,'LINEAR HARDENING',E21.5/
     510X,'PERCENT ISOTROPIC HARD.',E14.5/
     610X,'NUM. LOCAL NEWTON ITERATIONS     ',F5.0)
c2011  FORMAT(10X,'DENSITY',E30.5)

2007  FORMAT(/5X,
     1' NON-ASSOCIATIVE PLANE STRAIN-AXISYMMETRIC PLASTICITY ELEMENT'/
     25X,' DRUCKER-PRAGER YIELD CONDITION.  VON-MISSES FLOW RULE'//10X
     3,'BULK MODULUS',E25.5/10X,'SHEAR MODULUS',E24.5/10X
     4,'YIELD STRESS',E25.5/10X,'YIELD CIRCLE RADIUS',E18.5/10X
     5,'TANGENT ALPHA',E24.5)
2008  FORMAT(10X,'DENSITY',E30.5/
     1 10X,'TYPE (0=PLANE STRAIN, 1=AXISYM.)',I3/
     2 10X,'STRAIN MATRIX (0=BBAR 1=B)      ',I3/)
c2009  FORMAT(' ERROR * * REINPUT LAST DATA LINE')
      END

      SUBROUTINE GVEC26(XL,UL,C,NDM,NDF)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /ELM26/ TRDE,G(2,4),IBBAR
!$OMP THREADPRIVATE (/ELM26/)       
      DIMENSION XL(NDM,4),UL(NDF,4),CR(4)
      SAVE /ELM26/
C.... SET UP CR ARRAY (R FOR AXISYMMETRIC, 1'S FOR PLANE)
      DO 100 I = 1,4
      CR(I) = 1.0D0
      IF(C.NE.0.0D0) CR(I) = XL(1,I)
100   CONTINUE
C.... SET UP SUMS
      RETA = - XL(1,1) - XL(1,2) + XL(1,3) + XL(1,4)
      RPSI = - XL(1,1) + XL(1,2) + XL(1,3) - XL(1,4)
      RPXE =   XL(1,1) - XL(1,2) + XL(1,3) - XL(1,4)
      ZETA = - XL(2,1) - XL(2,2) + XL(2,3) + XL(2,4)
      ZPSI = - XL(2,1) + XL(2,2) + XL(2,3) - XL(2,4)
      ZPXE =   XL(2,1) - XL(2,2) + XL(2,3) - XL(2,4)
      CRPSI = - CR(1) + CR(2) + CR(3) - CR(4)
      CRETA = - CR(1) - CR(2) + CR(3) + CR(4)
      CRPXE = + CR(1) - CR(2) + CR(3) - CR(4)
      CRSUM = + CR(1) + CR(2) + CR(3) + CR(4)
C.... COMPUTE JACOBIAN CONSTANTS
      XJ0 = (RPSI*ZETA - RETA*ZPSI)
      XJ1 = (RPSI*ZPXE - RPXE*ZPSI)
      XJ2 = (RPXE*ZETA - RETA*ZPXE)
      VOL = XJ0*CRSUM + (XJ1*CRPSI + XJ2*CRETA)/3.0
C.... MODIFY TERMS TO FORM THE VOLUMETRIC MATRIX
      XJ0C = XJ0*C/VOL
      CRSUM = CRSUM/VOL
      CRPSI = CRPSI/VOL
      CRETA = CRETA/VOL
      CRPXE = CRPXE/VOL
C.... FORM G-VECTOR CONSTANTS
      GPSI1 = ZETA*CRSUM + (ZPXE*CRPSI + XJ1*C/VOL)/3.0
      GETA1 =-ZPSI*CRSUM - (ZPXE*CRETA - XJ2*C/VOL)/3.0
      GPXE1 = (ZETA*CRETA - ZPSI*CRPSI)/3.0
      GPSI2 =-RETA*CRSUM - (RPXE*CRPSI)/3.0
      GETA2 = RPSI*CRSUM + (RPXE*CRETA)/3.0
      GPXE2 = (RPSI*CRPSI - RETA*CRETA)/3.0
C.... FORM THE G-VECTOR FOR EACH SHAPE FUNCTION
      G(1,1) = - GPSI1 - GETA1 + GPXE1 + XJ0C
      G(1,2) = + GPSI1 - GETA1 - GPXE1 + XJ0C
      G(1,3) = + GPSI1 + GETA1 + GPXE1 + XJ0C
      G(1,4) = - GPSI1 + GETA1 - GPXE1 + XJ0C
      G(2,1) = - GPSI2 - GETA2 + GPXE2
      G(2,2) = + GPSI2 - GETA2 - GPXE2
      G(2,3) = + GPSI2 + GETA2 + GPXE2
      G(2,4) = - GPSI2 + GETA2 - GPXE2
C.... COMPUTE TRACE OF STRAIN (OR ITS INCREMENT)
      TRDE = 0.0
      DO 200 N = 1,4
200   TRDE = TRDE + G(1,N)*UL(1,N) + G(2,N)*UL(2,N)
      TRDE = TRDE/3.0
      RETURN
      END
      SUBROUTINE BMAT26(C,R,SHP,G,BBAR,II)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION SHP(3),G(2),BBAR(4,2)
C.... BBAR MATRIX FOR PLANE AND AXISYMMETRIC PROBLEMS
      SH3 = C*SHP(3)/R
      BBAR(1,1) = SHP(1)
      BBAR(2,1) = 0.0
      BBAR(3,1) = SH3
      BBAR(4,1) = SHP(2)
      BBAR(1,2) = 0.0
      BBAR(2,2) = SHP(2)
      BBAR(3,2) = 0.0
      BBAR(4,2) = SHP(1)
      IF(II.NE.0) RETURN
      BB1 = (G(1) - SHP(1) - SH3)/3.0
      BB2 = (G(2) - SHP(2))/3.0
      DO 100 I = 1,3
      BBAR(I,1) = BBAR(I,1) + BB1
100   BBAR(I,2) = BBAR(I,2) + BB2
      RETURN
      END
      SUBROUTINE STRN26(XR1,SHP,XL,UL,TYPE,XR0,XZ0,NDM,NDF,NEL,DE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION SHP(3,9),XL(NDM,4),UL(NDF,4),DE(4)
C
C.... COMPUTE STRAIN TENSOR FOR CONSTITUTIVE EQUATIONS
      DUR   = 0.0D0
      XR0   = 0.0D0
      XZ0   = 0.0D0
      DE(1) = 0.0D0
      DE(2) = 0.0D0
      DE(4) = 0.0D0
      DO 310 K = 1,NEL
      XR0   = XR0   + SHP(3,K)*XL(1,K)
      XZ0   = XZ0   + SHP(3,K)*XL(2,K)
      DUR   = DUR   + SHP(3,K)*UL(1,K)
      DE(1) = DE(1) + UL(1,K)*SHP(1,K)
      DE(2) = DE(2) + UL(2,K)*SHP(2,K)
      DE(4) = DE(4) + UL(2,K)*SHP(1,K) + UL(1,K)*SHP(2,K)
310   CONTINUE
      XR1   = 1.0 + TYPE*(XR0 - 1.0)
      DE(3) = TYPE*DUR/XR1
C.... HALF ENGINEERING SHEAR STRAIN
      DE(4) = DE(4)*0.5D0
      RETURN
      END
      SUBROUTINE SHAPEF26(S,T,XL,SHP,XSJ,NDM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C.... SHAPE FUNCTION ROUTINE FOR 4-NODE ISOPARAMETRIC QUADRILATERALS
      DIMENSION XL(NDM,4),SHP(3,4)
C.... SET UP INTERPOLATIONS
      SH = 0.5*S
      TH = 0.5*T
      SP = 0.5 + SH
      TP = 0.5 + TH
      SM = 0.5 - SH
      TM = 0.5 - TH
C.... SET UP NATURAL COORDINATE FUNCTIONS (TIMES 4)
      XO =  XL(1,1)-XL(1,2)+XL(1,3)-XL(1,4)
      XS = -XL(1,1)+XL(1,2)+XL(1,3)-XL(1,4) + XO*T
      XT = -XL(1,1)-XL(1,2)+XL(1,3)+XL(1,4) + XO*S
      YO =  XL(2,1)-XL(2,2)+XL(2,3)-XL(2,4)
      YS = -XL(2,1)+XL(2,2)+XL(2,3)-XL(2,4) + YO*T
      YT = -XL(2,1)-XL(2,2)+XL(2,3)+XL(2,4) + YO*S
C.... COMPUTE JACOBIAN (TIMES 16)
      XSJ = XS*YT - XT*YS
C.... DIVIDE FUNCTIONS BY JACOBIAN
      XS  = (XS+XS)/XSJ
      XT  = (XT+XT)/XSJ
      YS  = (YS+YS)/XSJ
      YT  = (YT+YT)/XSJ
C.... MULTIPLY BY INTERPOLATIONS
      YTM =  YT*TM
      YSM =  YS*SM
      YTP =  YT*TP
      YSP =  YS*SP
      XTM =  XT*TM
      XSM =  XS*SM
      XTP =  XT*TP
      XSP =  XS*SP
C.... COMPUTE SHAPE FUNCTIONS
      SHP(1,1) = - YTM+YSM
      SHP(1,2) =   YTM+YSP
      SHP(1,3) =   YTP-YSP
      SHP(1,4) = - YTP-YSM
      SHP(2,1) =   XTM-XSM
      SHP(2,2) = - XTM-XSP
      SHP(2,3) = - XTP+XSP
      SHP(2,4) =   XTP+XSM
      SHP(3,1) =   SM*TM
      SHP(3,2) =   SP*TM
      SHP(3,3) =   SP*TP
      SHP(3,4) =   SM*TP
C.... DIVIDE JACOBIAN BY 16 (MULTIPLY BY .0625)
      XSJ = 0.0625*XSJ
      RETURN
      END
      SUBROUTINE STCN26(IX,XL,SIGH,DT,ST,NDM,NEL,NNP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION DT(NNP),ST(NNP,*),XL(NDM,*),SIG(5),SS(4),TT(4),
     1          IX(1),SIGH(10,4)
      DATA SS/-1.0D0,1.0D0,1.0D0,-1.0D0/,TT/-1.0D0,-1.0D0,1.0D0,1.0D0/
C.... COMPUTE JACOBIAN PARTS
      SQR3 = DSQRT(3.0D0)
      CALL QJAC26 (XL,NDM, XSJ0,XSJ1,XSJ2)
      DO 200 II = 1,4 ! GP
C....   COMPUTE STRESSES AT NODES FROM HISTORY TERMS
        CALL PZERO (SIG,5)
        DO 100 JJ = 1,4 ! Node
          SHPJ = 0.25*(1.+SQR3*SS(II)*SS(JJ))*(1.+SQR3*TT(II)*TT(JJ))
          SIG(1) = SIG(1) + SHPJ*SIGH(1,JJ)
          SIG(2) = SIG(2) + SHPJ*SIGH(4,JJ)
          SIG(3) = SIG(3) + SHPJ*SIGH(2,JJ)
          SIG(4) = SIG(4) + SHPJ*SIGH(3,JJ)
100     SIG(5) = SIG(5) + SHPJ*SIGH(5,JJ)
        XSJ = XSJ0 + SS(II)*XSJ1 + TT(II)*XSJ2
C....   COMPUTE STRESSES
        LL = abs(IX(II))
        IF(LL.LE.0) GO TO 200
        DT(LL)   = DT(LL)   +        XSJ
        ST(LL,1) = ST(LL,1) + SIG(1)*XSJ
        ST(LL,2) = ST(LL,2) + SIG(2)*XSJ
        ST(LL,3) = ST(LL,3) + SIG(3)*XSJ
        ST(LL,4) = ST(LL,4) + SIG(4)*XSJ
200     ST(LL,5) = ST(LL,5) + SIG(5)*XSJ
      RETURN
      END
      SUBROUTINE QJAC26(XL,NDM, XSJ0,XSJ1,XSJ2)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C.... JACOBIAN ROUTINE FOR 4-NODE QUADRILATERALS
      DIMENSION XL(NDM,4)
C.... SET UP NATURAL COORDINATE FUNCTIONS (TIMES 4)
      XO =  XL(1,1)-XL(1,2)+XL(1,3)-XL(1,4)
      XS = -XL(1,1)+XL(1,2)+XL(1,3)-XL(1,4)
      XT = -XL(1,1)-XL(1,2)+XL(1,3)+XL(1,4)
      YO =  XL(2,1)-XL(2,2)+XL(2,3)-XL(2,4)
      YS = -XL(2,1)+XL(2,2)+XL(2,3)-XL(2,4)
      YT = -XL(2,1)-XL(2,2)+XL(2,3)+XL(2,4)
C.... COMPUTE JACOBIAN PARTS
      XSJ0 = 0.0625*(XS*YT - XT*YS)
      XSJ1 = 0.0625*(XS*YO - XO*YS)
      XSJ2 = 0.0625*(XO*YT - XT*YO)
      RETURN
      END

      SUBROUTINE MODEL26 (D,EP,DE,H1,H2,AA,IMAT)
C
C.... SMALL DEFORMATION MATERIAL MODELS FOR FEAP
C
      USE eldata
      USE iofile
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION D(*),EP(*),DE(*),AA(*),HL(10),H1(10),H2(10)
C.... MOVE TIME N DATA TO LOCAL ARRAY
      DO 10 I = 1,10
  10  HL(I) = H1(I)
      GO TO (11,12,13,14,15,16),IMAT
  11  CALL ELAS26 (D,DE,HL(6),AA)
      GO TO 100
  12  CALL VSEL26 (D,DE,HL(2),HL(6),AA)
      GO TO 100
  13  CALL VSCD26 (D,EP,DE,HL(1),HL(2),HL(6),AA)
      GO TO 100
  14  CALL VSPL26 (D,DE,HL(6),AA)
      GO TO 100
  15  CALL ELPLKH (D,D(3),DE,HL(1),HL(6),HL(2),AA)
      GO TO 100
  16  CALL DRUCKER (D,DE,HL(6),AA)
      GO TO 100
 100  DO 101 I = 1,10
 101  H2(I) = HL(I)
      RETURN
      END
      
      SUBROUTINE ELAS26(D,DE,SIG,AA)
C
C.... ELASTIC MODEL FOR FEAP
C
      USE eldata
      USE iofile
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /ELM26/  TRDE,G(8),IBBAR
!$OMP THREADPRIVATE (/ELM26/)       
      DIMENSION DE(4),SIG(4),AA(4,4),D(*)
      SAVE /ELM26/
      RTWO = D(4)*D(4)
      TWOG = D(2) + D(2)
      ELAM = D(1) - TWOG/3.0D0
      PRESS = (SIG(1)+SIG(2)+SIG(3))/3.0D0
      DETR =  (DE(1)+DE(2)+DE(3))/3.0D0
C.... COMPUTE THE DEVIATOR STRESS
      DO 100 I = 1,3
100   SIG(I) = SIG(I) + TWOG*(DE(I) - DETR) - PRESS
      SIG(4) = SIG(4) + TWOG*DE(4)
C.... SET UP ELASTIC TANGENT
      DO 110 I = 1,3
      DO 105 J = 1,3
105   AA(I,J) = ELAM
      AA(I,4) = 0.0D0
      AA(4,I) = 0.0D0
110   AA(I,I) = ELAM + TWOG
      AA(4,4) = D(2)
C.... COMPUTE THE MISES YIELD STATE
      DM = 0.0
      IF(DOT(SIG,SIG,4) + SIG(4)*SIG(4) .GT.RTWO) DM = 1.0D0
C.... ADD PRESSURE TERM
      IF(IBBAR.EQ.0) DETR = TRDE
      PRESS = PRESS + 3.*D(1)*DETR
      DO 130 I = 1,3
130   SIG(I) = SIG(I) + PRESS
      RETURN
      END
      
      SUBROUTINE VSEL26 (D,DE,HSN,SIG,AA)
C
C.... SMALL DEFORMATION VISCO-ELASTIC MODEL FOR FEAP
C
      USE tdata
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /ELM26/  TRDE,G(8),IBBAR
!$OMP THREADPRIVATE (/ELM26/)       
      DIMENSION DE(4),HSN(4),SIG(4),AA(4,4),D(*)
      SAVE /ELM26/
C
      QK = 3.*D(1)
      QS = (D(2) + D(2))
      QL = (D(3) + D(3))
      QB = D(4)*DT
      QD = QS - QL
      Q1 = DEXP(-QB)
      Q2 = 1.0
      IF(Q1.LT.0.99999D0) Q2 = (1.-Q1)/QB
      DETR =  (DE(1)+DE(2)+DE(3))/3.0D0
      DO 50 I = 1,3
50    DE(I) = DE(I) -DETR
      DO 100 J = 1,4
      T = HSN(J)
      HSN(J) = Q1*T + Q2*DE(J)
100   SIG(J) = SIG(J)  + QL*DE(J) + QD*(HSN(J)-T)
C.... ADD ON THE MEAN STRESS TERM
      IF(IBBAR.EQ.0) DETR = TRDE
      PRESS = QK*DETR
      DO 105 J = 1,3
105   SIG(J) = SIG(J) + PRESS
C.... COMPUTE THE TANGENT MATRIX
      QB = QL + QD*Q2
      Q1 = (QK - QB)/3.
      Q2 = Q1 + QB
      DO 120 I = 1,3
      AA(I,4) = 0.0
      AA(4,I) = 0.0
      DO 110 J = 1,3
110   AA(I,J) = Q1
120   AA(I,I) = Q2
      AA(4,4) = QB/2.
      RETURN
      END
      
      SUBROUTINE VSCD26 (D,EP,DE,XJAC,HSN,SIG,AA)
C
C.... SMALL DEFORMATION VISCO-ELASTIC DAMAGE MODEL FOR FEAP
C
      USE tdata
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /ELM26/  TRDE,G(8),IBBAR
!$OMP THREADPRIVATE (/ELM26/)       
      DIMENSION EP(4),EP0(4),DE(4),HSN(4),SIG(4),AA(4,4),D(*)
      SAVE /ELM26/
C
      QK = 3.0D0*D(1)
      QS = (D(2) + D(2))
      QL = (D(3) + D(3))
      QB = D(4)*DT
      QD = QS - QL
      Q1 = DEXP(-QB)
      Q2 = 1.0D0 - 0.5*QB + QB*QB/6.0D0
      IF(Q1.LT.0.99999D0) Q2 = (1.0D0 - Q1)/QB
C.... COMPUTE STRAIN DEVIATORS
      EPTR  = (EP(1)+EP(2)+EP(3))/3.0D0
      DETR  = (DE(1)+DE(2)+DE(3))/3.0D0
      DO 25 I = 1,3
      DE(I) = DE(I) - DETR
 25   EP(I) = EP(I) - EPTR
C
C.... COMPUTE DAMAGE VARIABLES
      DO 50  J = 1,4
 50   EP0(J)= EP(J) - DE(J)
      XJC   = DSQRT(DOT(EP,EP,4) + EP(4)*EP(4))/D(6)
      XJCM  = XJAC
            GG0 = 1.0D0 - 0.50D0*XJCM + XJCM*XJCM/6.0D0
            IF(XJCM.GT..00001D0) GG0 = (1.0D0 - DEXP(-XJCM))/XJCM
            GG0   = D(5) + (1.0D0 - D(5))*GG0
C.... CHECK FOR LOADING
      IF (XJC.GT.XJCM) THEN
         IYLD     = 1
         XJC0     = DSQRT(DOT(EP0,EP0,4) + EP0(4)*EP0(4))/D(6)
         IF (XJCM.GT.XJC0) THEN
            GG0   = 1.0D0 - 0.50D0*XJC0 + XJC0*XJC0/6.0D0
            IF(XJC0.GT..00001D0) GG0 = (1.0D0 - DEXP(-XJC0))/XJC0
            GG0   = D(5) + (1.0D0 - D(5))*GG0
         ENDIF
         XJAC = XJC
         GG       = 1.0D0 - 0.5D0*XJC + XJC*XJC/6.0D0
         F0       = XJC*(-.5D0 + XJC/3.0D0 - XJC*XJC*.125D0)
         XNORM    = 1.0D0
         IF(XJC.GT.0.00001D0) THEN
            F0    = DEXP(-XJC)
            GG    = (1.0D0 - F0)/XJC
            F0    = F0 - GG
            XNORM = XJC*D(6)
         ENDIF
         GG   = D(5) + (1.0 - D(5))*GG
         F0   = (1.0D0 - D(5))*F0/XNORM/XNORM
      ELSE
         IYLD = 0
         GG   = GG0
      ENDIF
C
C.... UPDATE PSEUDO-STRESSES
      DO 100 J = 1,4
      DE(J)     = GG*EP(J) - GG0*EP0(J)
C.... SUPERPOSE VISCOUS EFFECTS
      T         = HSN(J)
      HSN(J) = Q1*T + Q2*DE(J)
100   SIG(J)    = SIG(J)  + QL*DE(J) + QD*(HSN(J) - T)
C.... ADD ON THE MEAN STRESS TERM
      IF(IBBAR.EQ.0) DETR = TRDE
      PRESS = QK*DETR
      DO 105 J = 1,3
105   SIG(J)    = SIG(J) + PRESS
C
C.... COMPUTE THE TANGENT MATRIX
      QB = (QL + QD*Q2)*GG
      Q1 = (QK - QB)/3.0D0
      Q2 =  Q1 + QB
      DO 120 I = 1,3
      AA(I,4) = 0.0D0
      AA(4,I) = 0.0D0
      DO 110 J = 1,3
110   AA(I,J) = Q1
120   AA(I,I) = Q2
      AA(4,4) = QB/2.0D0
      IF (IYLD.EQ.1) THEN
C.... UPDATE TANGENT MATRIX TO ACCOUNT FOR LOADING
      QB = F0*QB/GG
      DO 140 I = 1,4
      TEMP     = QB*EP(I)
      DO 130 J = 1,4
130   AA(I,J)  = AA(I,J) + TEMP*EP(J)
140   CONTINUE
      ENDIF
      RETURN
      END
      
      SUBROUTINE VSPL26 (D,DE,SIG,AA)
C
C.... PLANE/AXISYMMETRIC VISCOPLASTIC ROUTINE FOR FEAP
C
      USE eldata
      USE tdata
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /ELM26/  TRDE,G(8),IBBAR
!$OMP THREADPRIVATE (/ELM26/)       
      DIMENSION D(*),DE(4),SIG(5),SS(4),AA(4,4),PSI(4),
     1          SIGNN(4)
      SAVE /ELM26/
      DM = 0.0D0
      A0 = 0.5/D(2)
      B0 = 1.D0/3.D0/D(1) -A0
      B1 = B0/3.D0
C.... SET UP VALUES AT TIME T-N
      PN = (SIG(1)+SIG(2)+SIG(3))/3.0D0
      DO 50 I = 1,4
50    SIGNN(I) = SIG(I)
      EPSN = (1.0D-12)*DOT(DE,DE,4)
C... DOUBLE DE(4) TO SHEAR STRAIN INCREMENT
      DE(4) = DE(4) + DE(4)
C...  LIMIT ITERATIONS
      DO 200 NIT = 1,100
      PRESS = (SIG(1)+SIG(2)+SIG(3))/3.0D0
      BDP = B0*(PRESS-PN)
      DO 100 I = 1,3
      SS(I) = SIG(I) - PRESS
100   PSI(I) = DE(I) - BDP - A0*(SIG(I)-SIGNN(I))
      PSI(4) = DE(4) - (SIG(4)-SIGNN(4))/D(2)
      SS(4) = SIG(4)
      FF = DOT(SS,SS,4) + SS(4)**2
      SS(4) = SS(4) + SS(4)
      DO 120 I = 1,3
      DO 110 J = 1,3
110   AA(I,J) = B1
      AA(4,I) = 0.0
      AA(I,4) = 0.0
120   AA(I,I) = B1 + A0
      AA(4,4) = A0 + A0
      FF = DSQRT(FF)
      DM = FF/D(4)/4.0D0
      SIG(5) = DSQRT(3.D0/2.D0)*FF
      FY = FF - D(4)
      IF(FY.LE.0.0D0) GO TO 190
C.... COMPUTE THE VISCOPLASTIC TANGENT AND CORRECTION TO PSI
      GDT = D(5)*DT
      NNN = D(6)
      DPHI = NNN*FY**(NNN-1)
      PHI  = DPHI*FY/NNN
      A1 = GDT*PHI/FF
      A3 = A1/3.0D0
      A2 = GDT/FF/FF*(DPHI-PHI/FF)
      DO 150 I = 1,3
      SA2 = A2*SS(I)
      PSI(I) = PSI(I) - A1*SS(I)
      DO 140 J = 1,3
140   AA(I,J) = AA(I,J) - A3 + SA2*SS(J)
      AA(I,4) = AA(I,4) + SA2*SS(4)
      AA(4,I) = AA(I,4)
150   AA(I,I) = AA(I,I) + A1
      AA(4,4) = AA(4,4) + A1 + A1 + A2*SS(4)*SS(4)
      PSI(4) = PSI(4) - A1*SS(4)
190   PSIN = DOT(PSI,PSI,4)
      CALL INVERT(AA,4,4)
      IF(EPSN.EQ.0.0D0) GO TO 300
      IF(PSIN.LT.EPSN) GO TO 300
C.... COMPUTE CORRECTIONS TO STRESSES
      DO 195 I = 1,4
195   SIG(I) = SIG(I) + DOT(AA(1,I),PSI,4)
200   CONTINUE
300   RETURN
      END
      
      SUBROUTINE ELPLKH(D,YPAR,DE,EP,SIG,ALPH,AA)
C
C.... ELASTIC PLASTIC ISOTROPIC AND KINEMATIC HARDENING MODEL FOR FEAP
C
C.... 1. INPUT PARAMETERS
C
C        D      - ARRAY OF MATERIAL CONSTANTS
C        YPAR   - ARRAY OF YIELD FUNCTION PARAMETERS
C        DE     - INCREMENTAL DEVIATOR STRAINS
C        EP     - EFFECTIVE PLASTIC STRAIN AT T-N
C        SIG    - STRESSES AT T-N
C        ALPH   - BACK STRESS AT T-N
C
C.... 2. OUTPUT PARAMETERS
C
C        EP     - EFFECTIVE PLATIC STRAIN AT T-N+1
C        SIG    - STRESSES AT T-N+1
C        ALPH   - BACK STRESS AT T-N+1
C        AA     - "TANGENT" MATRIX AT T-N+1
C
C.... SET UP PARAMETERS
C
      USE eldata
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /ELM26/  TRDE,G(8),IBBAR
!$OMP THREADPRIVATE (/ELM26/)       
      DIMENSION DE(4),SIG(5),SIGDN(4),SIGTR(4),ALPH(4),SMAL(4),
     1          D(*),YPAR(*),AA(4,4),EN(4)
      SAVE /ELM26/
      DM = 0.D0
      TT = DSQRT(2.D0/3.D0)
      RTWO = D(4)*D(4)
      ONEG = D(2)
      TWOG = D(2) + D(2)
      BULK = D(1)
      ELAM = BULK - TWOG/3.
      PRESS = (SIG(1)+SIG(2)+SIG(3))/3.0D0
      DETR  = (DE(1) + DE(2) + DE(3))/3.0D0
C
C.... COMPUTE THE TRIAL DEVIATOR STRESS
C
      DO 100 I = 1,3
      DE(I)    = DE(I) - DETR
      SIGDN(I) = SIG(I) - PRESS
      SIGTR(I) = SIGDN(I) + TWOG*DE(I)
100   SMAL(I)  = SIGTR(I) - ALPH(I)
      SIGDN(4) = SIG(4)
      SIGTR(4) = SIG(4) + TWOG*DE(4)
      SMAL(4)  = SIGTR(4) - ALPH(4)
C
C.... SET UP ELASTIC TANGENT
C
      DO 110 I = 1,3
      DO 105 J = 1,3
105   AA(I,J) = ELAM
      AA(I,4) = 0.0D0
      AA(4,I) = 0.0D0
110   AA(I,I) = ELAM + TWOG
      AA(4,4) = ONEG
C
C.... COMPUTE THE YIELD STATE
C
      HAL = (YPAR(2)-YPAR(1))*(1.- DEXP(-YPAR(3)*EP)) + YPAR(4)*EP
      YLD = YPAR(1) + YPAR(5)*HAL
      SMALTR = DSQRT(DOT(SMAL,SMAL,3) + (SMAL(4)+SMAL(4))*SMAL(4))
      SIG(5) = SMALTR/TT
      IF (SMALTR.LE.TT*YLD) GO TO 135
C
C.... COMPUTE SCALE FACTOR FOR TANGENT
C
      EPN = EP
      HALN= (1. - YPAR(5))*HAL
      HAL = HALN
      YLD = YKPI26(EP,SMALTR,ONEG,YPAR, BETA,H,HAL,N)
      DM = H/4.0D0
      SIG(5) = YLD
C.... THE TERM 1.D-8 IS TO ENSURE THAT THE RESULTING STRESS IS
C.... OUTSIDE THE CURRENT YIELD SURFACE.
      GFACT = (DSQRT(6.D0)-1.D-8)*ONEG*(EP - EPN)
      AFACT = TT*(HAL - HALN)
      DO 115 I = 1,4
      EN(I) = SMAL(I)/SMALTR
      SIGTR(I) = SIGTR(I) - GFACT*EN(I)
115   ALPH(I)  = ALPH(I)  + AFACT*EN(I)
C
C.... PLASTIC MODIFICATION FOR TANGENT
C
      GAM1 = (1.D0 - (TT*YLD + AFACT)/SMALTR)*TWOG
      GAM2 = TWOG*BETA - GAM1
      GAM3 = GAM1/3.0D0
      DO 125 I = 1,3
      DO 120 J = 1,3
 120  AA(I,J) = AA(I,J) + GAM3
 125  AA(I,I) = AA(I,I) - GAM1
      AA(4,4) = AA(4,4) - 0.5D0*GAM1
      DO 130 I = 1,4
      SIGR    = GAM2*EN(I)
      DO 130 J = 1,4
 130  AA(I,J) = AA(I,J) - SIGR*EN(J)
C
C.... ADD PRESSURE TERM
C
 135  IF(IBBAR.EQ.0) DETR = TRDE
      PRESS = PRESS + 3.0D0*BULK*DETR
      DO 140 I = 1,3
      SIGDN(I) = SIGTR(I)
 140  SIG(I) = SIGTR(I) + PRESS
      SIG(4) = SIGTR(4)
      SIGDN(4) = SIGTR(4)
C
      RETURN
      END
      
      DOUBLE PRECISION FUNCTION YKPI26(EP,SALTR,G,YPAR, BETA,H,HAL,N)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION YPAR(7)
C
C.... 1. INPUT PARAMETERS
C
C          EP      -  VALUE OF PLASTIC STRAIN AT TIME T-N
C          SALTR   -  NORM OF TRIAL DEVIATOR LESS BACK STRESS (I.E.,
C                     = SQRT( DOT(SALTR,SALTR,5))
C          G       -  ELASTIC SHEAR MODULUS
C          YPAR(1) - Y-ZERO    (YIELD AT EP = 0.)
C          YPAR(2) - Y-INFINITY
C          YPAR(3) - ETA
C          YPAR(4) - B   -     LINEAR HARDENING PARAMETER
C          YPAR(5) - PORTION OF HARDENING TO BE ISOTROPIC
C          HAL     - KINEMATIC HARDENING AT TIME T-N
C
C     H    = YPAR(2) - (YPAR(2) - YPAR(1)) * EXP (-YPAR(3)*EP)
C                    + YPAR(4)*EP
C
C     HAL  = (H - YPAR(1))*(1. - YPAR(5))
C
C     YKPI = H - HAL
C
C.... 2. OUTPUT PARAMETERS FOR CURRENT ITERATION AT TIME T-N+1
C
C          YKPI26  - YIELD FUNCTION VALUE FOR CURRENT ITERATE
C          BETA    - VALUE OF PARAMETER FOR TANGENT MATRIX
C          H       - VALUE OF TOTAL HARDINING AT T-N+1
C          HAL     - PORTION OF TOTAL HARDENING WHICH IS KINEMATIC
C
C.... SET UP CONSTANTS
C
      DATA tol26,tol261/1.D-9,1.D-7/
      NMAX = DINT(YPAR(7))
      C0 = (DSQRT(1.5D0)*SALTR + HAL - YPAR(2))/(3.*G)
      C1 = (YPAR(2) - YPAR(1))/(3.*G)*DEXP(-YPAR(3)*EP)
      C2 = C1*YPAR(3)
      C3 = YPAR(4)/(3.*G)
C
C.... BEGIN NEWTON ITERATION
C
      DEP  = 0.0
      ITER = 0
      DXEP = 0.0
100   ITER = ITER + 1
      EXDEP = DEXP(-YPAR(3)*DEP)
      GG = C0 - DEP + C1*EXDEP - C3*(EP + DEP)
      BETA = 1./(1. + C3 + C2*EXDEP)
      DDEP = BETA*GG
      DEP  = DEP + DDEP
      DXEP = DMAX1(DXEP,DABS(DEP))
      IF(DABS(DDEP).LT.tol26*DXEP) GO TO 200
      IF(DXEP.LT.tol261*(EP+DABS(DEP))) GO TO 200
      IF(ITER.LE.NMAX) GO TO 100
      WRITE(6,1000) N,NMAX,EP,DDEP,DXEP,tol26
 200  EP = EP + DEP
      H = YPAR(2) - (YPAR(2)-YPAR(1))*DEXP(-YPAR(3)*EP) + YPAR(4)*EP
      HAL = (H - YPAR(1))*(1. - YPAR(5))
      YKPI26 = H - HAL
      RETURN
1000  FORMAT(/10X,'**ELEMENT:',I6,2X,'CONVERGENCE NOT ATTAINED IN',I6/
     1        10X,'    EP,DDEP,DXEP,TOL ARE '/10X,4E15.7)
      END
      
      SUBROUTINE DRUCKER(D,DE,SIG,AA)
C
C.... NON-ASSOCIATIVE DRUCKER-PRAGER LINEAR KINEMATICS MODEL FOR FEAP
C
C.... YIELD FUNCTION:  F = \\ S \\ + BETA*PRESS - R = 0
C
C           R        = SQRT(2/3)* Y,         Y=YIELD STRESS.
C           PRESS    = TRACE( SIGMA )/3
C           BETA     = MATERIAL CONSTANT = TAN(ALPHA) > 0
C           \\ S \\  = SQRT(2*J2) = SIJ SIJ.
C
C.... SET PARAMENTERS
C
      USE eldata
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /ELM26/ TRDE,G(8),IBBAR
!$OMP THREADPRIVATE (/ELM26/)       
      SAVE /ELM26/
      DIMENSION DE(4),SIG(*),AA(4,4),D(*)
      DM    = 0.0
      BETA  = D(5)
      ONEG  = D(2)
      TWOG  = D(2) + D(2)
      BULK  = D(1)
      ELAM  = BULK - TWOG/3.0D0
      PRESN = (SIG(1)+SIG(2)+SIG(3))/3.0D0
      DETR  =  (DE(1)+DE(2)+DE(3))/3.0D0
C
C.... COMPUTE THE TRIAL DEVIATOR STRESS AND TRIAL PRESSURE
C
      DO 100 I = 1,3
      DE(I)  = DE(I) - DETR
100   SIG(I) = SIG(I) + TWOG*DE(I) - PRESN
      SIG(4) = SIG(4) + TWOG*DE(4)
      IF(IBBAR.EQ.0) DETR = TRDE
      PRESSI = PRESN  + 3.0*BULK*DETR
C
C.... SET UP ELASTIC TANGENT
C
      DO 110 I = 1,3
      DO 105 J = 1,3
105   AA(I,J) = ELAM
      AA(I,4) = 0.0D0
      AA(4,I) = 0.0D0
110   AA(I,I) = ELAM + TWOG
      AA(4,4) = ONEG
C
C.... COMPUTE THE YIELD STATE
C
      YLD2 = DOT(SIG,SIG,4) + SIG(4)*SIG(4)
      YLD  = DSQRT(YLD2)
      SIG(5) = YLD*DSQRT(1.5D0)
      RNI  = D(4) - BETA*PRESSI
      IF(YLD  .GT.  RNI) THEN
C
C.... CHECK THAT RADIUS > 0
C
      IF(RNI  .LT. 0.D0) THEN
         DM   = YLD/4.0
       PRESSI =  D(4)/BETA
       DO 112 I = 1,4
 112     SIG(I) = PRESSI
       SIG(4) = 0.D0
       WRITE(6,2000) PRESSI,N
       RETURN
      ENDIF
C
C.... RADIAL RETURN
C
      FACT   = 1.D-8 + RNI/YLD
      DO 115 I = 1,4
 115  SIG(I) = FACT*SIG(I)
      SIG(5) = RNI
C
C.... PLASTIC MODIFICATION FOR TANGENT
C
      GAM1 = (1.D0 - FACT)*TWOG
      GAM2 = (TWOG - GAM1)/RNI/RNI
      GAM3 = GAM1/3.D0
      GAM4 = BULK*BETA/RNI
C
      DO 120 I = 1,3
      AA(I,I) = AA(I,I) - GAM1
      DO 120 J = 1,3
 120  AA(I,J) = AA(I,J) + GAM3
      AA(4,4) = AA(4,4) - 0.5D0*GAM1
C
      DO 130 I = 1,4
      SIGR    = GAM2*SIG(I)
      DO 130 J = 1,4
 130  AA(I,J) = AA(I,J) - SIGR*SIG(J)
C
      DO 140 I = 1,4
      AAI     = GAM4*SIG(I)
      DO 140 J = 1,3
 140  AA(I,J) = AA(I,J) - AAI
      ENDIF
C
C.... ADD PRESSURE TERM
C
      DO 150 I = 1,3
 150  SIG(I) = SIG(I) + PRESSI
C
      RETURN
C
 2000 FORMAT(' **WARNING: J1 =',E15.5,' IN ELEMENT:',I5,'**')
      END
